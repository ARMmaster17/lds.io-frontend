.container
  .row
    .col-md-12

      h1 LDS API v2.0.1

      h2 API Overview
      pre
        code.
          &nbsp;  //
          &nbsp;  // APIs
          &nbsp;  //
          &nbsp;
          &nbsp;  https://lds.io/api/ldsio/accounts
          &nbsp;  https://lds.io/api/ldsio/&lt;accountId>/me
          &nbsp;  https://lds.io/api/ldsio/&lt;accountId>/stakes/&lt;stakeId>
          &nbsp;  https://lds.io/api/ldsio/&lt;accountId>/stakes/&lt;stakeId>/photos
          &nbsp;  https://lds.io/api/ldsio/&lt;accountId>/stakes/&lt;stakeId>/wards/&lt;wardId>
          &nbsp;  https://lds.io/api/ldsio/&lt;accountId>/stakes/&lt;stakeId>/wards/&lt;wardId>/photos
          &nbsp;  https://lds.io/api/ldsio/&lt;accountId>/photos/individual/&lt;memberId>/&lt;date>/medium/&lt;whatever>.jpg
          &nbsp;  https://lds.io/api/ldsio/&lt;accountId>/photos/family/&lt;homeId>/&lt;date>/medium/&lt;whatever>.jpg
          &nbsp;
          &nbsp;  Note: choose from large (500x375), medium (200x150), or thumbnail (40x40)

      h3 Something not Working?
      ul
        li <a href="https://github.com/LDSorg/lds.io-backend/issues">Report API Bugs on Github</a>
        li <a href="https://github.com/LDSorg/lds.io-frontend/issues">Report Browser Bugs on Github</a>

      h3 Getting Started
      p
        span See &#32;
        a(href="https://github.com/LDSorg/choose-your-own-adventure" target="lds-api-adventure") Choose your own LDS API Adventure
        span &#32; for quick start demos with
      ul
        li Angular
        li jQuery
        li node
        li ruby

      h3 JavaScript APIs
      p
        a(href="https://github.com/LDSorg/lds-api-js" target="lds-api-js") https://github.com/LDSorg/lds-api-js
      p There is a single JavaScript library that includes everything you need for
      ul
        li authentication
        li API calls
        li caching
        li local storage

      p It includes wrappers for
      ul
        li
          a(href="https://github.com/LDSorg/lds-api-js/blob/master/README.jquery.md" target="jquery-lds-io") jQuery
        li
          a(href="https://github.com/LDSorg/lds-api-js/blob/master/README.angular.md" target="angular-lds-io") AngularJS

      p Check it out:
      ul
        li
          a(href="https://github.com/LDSorg/lds-api-js" target="lds-api-js") https://github.com/LDSorg/lds-api-js

      h2 OAuth3

      p OAuth3 is 100% backwards compatible with OAuth2, however, there are some changes to be aware of:

      h3 OAuth3 Authorization Endpoints
      .alert.alert-info
        p OAuth3 has exactly 1 well-known, strictly defined endpoint
      ul
        li
          span Directive Endpoint:  
          a(href="https://ldsconnect.org/oauth3.json") https://ldsconnect.org/oauth3.json
          p
            pre
              code.
                &nbsp;  { "authorization_dialog": {
                &nbsp;      "method": "GET"
                &nbsp;    , "url": "https://example.com/oauth3/authorize"
                &nbsp;    }
                &nbsp;  , "access_token": {
                &nbsp;      "method": "POST"
                &nbsp;    , "url": "https://example.com/oauth3/token"
                &nbsp;    }
                &nbsp;  , "profile": {
                &nbsp;      "method": "GET"
                &nbsp;    , "url": "https://example.com/oauth3/account/me"
                &nbsp;    }
                &nbsp;  }

          .alert.alert-danger
            p Do not hard code these URLs!
          p
            | Although the provider should provide advanced notice as well as HTTP redirects
            | if any of the URLs change, you should periodically refresh oauth3.json - such as
            | each time your server reboots and in accordance with the HTTP Expires header (especially
            | for always-on non-ephemeral servers).

      h4 Compare to Facebook

      p If you were connecting to facebook, your endpoints would look something like this:

      .alert.alert-info
        p OAuth2 has several undefined, loose endpoints
      ul
        li
          span Authorization URL:  
          a(href="https://www.facebook.com/dialog/oauth") https://www.facebook.com/dialog/oauth
        li
          span Token URL:  
          a(href="https://graph.facebook.com/oauth/access_token") https://graph.facebook.com/oauth/access_token
        li
          span Profile URL:  
          a(href="https://graph.facebook.com/me") https://graph.facebook.com/me

      p To implement a strategy you would have to go dig into documentation to learn whether to use a GET or POST and which parameters are required or optional, etc.

      h3 Why oauth3.json?
      p
        | OAuth3 is designed with the capacity for both delegatation and federation, which would not
        | be possible if connecting to a system required private implementation details such as with OAuth2.
        | Instead of dozens of libraries with slight variations for each provider, one library serves all
        | providers equally well with one strict, standardized JSON endpoint.
      p
        | Also note that the directive <strong>must</strong> be fetched from the end-user address.
        | LDS Connect users log in at ldsconnect.org.

      h3 Encryption
      p
        | Note that the protocol https:// is <strong>required</strong>.
        | OAuth3 implementations <strong>must</strong> not allow unencrypted connections.

      h3 Federation and Delegation
      p 
        | In delegated situations end-users will use identifiers such as
        | johndoe@example.com, johndoe.example.com, or example.com/johndoe.
        | Hence the OAuth3 resource should be a static, cacheable file, available
        | at an endpoint the user will know how to enter (if required).
