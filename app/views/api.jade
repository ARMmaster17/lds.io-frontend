.container
  .row
    .col-md-12

      h1 LDS API v2.0

      h2 API Overview
      pre
        code.
          &nbsp;  //
          &nbsp;  // APIs
          &nbsp;  //
          &nbsp;
          &nbsp;  https://lds.io/api/ldsio/accounts
          &nbsp;  https://lds.io/api/ldsio/&lt;accountId>/me
          &nbsp;  https://lds.io/api/ldsio/&lt;accountId>/stakes/&lt;stakeId>
          &nbsp;  https://lds.io/api/ldsio/&lt;accountId>/stakes/&lt;stakeId>/photos
          &nbsp;  https://lds.io/api/ldsio/&lt;accountId>/stakes/&lt;stakeId>/wards/&lt;wardId>
          &nbsp;  https://lds.io/api/ldsio/&lt;accountId>/stakes/&lt;stakeId>/wards/&lt;wardId>/photos
          &nbsp;  https://lds.io/api/ldsio/&lt;accountId>/photos/individual/&lt;memberId>/&lt;date>/medium/&lt;whatever>.jpg
          &nbsp;  https://lds.io/api/ldsio/&lt;accountId>/photos/family/&lt;homeId>/&lt;date>/medium/&lt;whatever>.jpg
          &nbsp;
          &nbsp;  Note: choose from large (500x375), medium (200x150), or thumbnail (40x40)

      h3 Getting Started
      p.
        You will interact with LDS I/O primary through two OAuth2 strategies.
      h4 Browser / Client-side Authentication
      p
        strong OAuth2 Implicit Grant Strategy
      p.
        The primary authentication and api access strategy takes place entirely in the browser.
      p.
        This allows your app to stay within the guidelines of the LDS.org privacy policy, as your
        app never gets any personal data, it is delivered directly to the user's browser without
        touching your server.
      p
        strong Zero-Config Demos
      ul
        li 
          a(
            href="https://github.com/LDSorg/frontend-oauth2-browser-jquery-example"
            target="implicit-jquery-seed"
          ) Browser-Only jQuery Seed Project (Implicit Grant Strategy)

      pre
        code.
          //
          // Usage
          //
          1. Copy <a href="https://ldsconnect.org/oauth-close.html"
              >oauth-close.html</a> into the root of your project

          2. Create a token handler (this is called by oauth-close.html)

              window.completeLogin = function (name, url) {
                var match;
                var token;

                match = url.match(/(^|\#|\?|\&)access_token=([^\&]+)(\&|$)/);
                if (!match || !match[2]) {
                  window.alert("looks like the login failed");
                  return;
                }

                token = match[2];

                testAccessToken(token);
              };

          3. Open a the login dialog

              var myAppDomain = 'https://local.ldsconnect.org:8043';
              var myAppId = 'TEST_ID_9e78b54c44a8746a5727c972';
              var requestedScope = ['me'];

              var url = 'https://lds.io/api/oauth3/dialog/authorize'
                + '?response_type=token'
                + '&client_id=' + myAppId
                + '&redirect_uri=' + myAppDomain + '/oauth-close.html?type=/auth/ldsconnect/callback/'
                + '&scope=' + encodeURIComponent(requestedScope.join(' '))
                + '&state=' + Math.random().toString().replace(/^0./, '')
                ;

              // NOTE: this currently redirects to lds.io, which is techie,
              // but will redirect to ldsconnect.org, which is non-techie,
              // in the near future
              window.open(url, 'ldsconnectLogin', 'height=720,width=620')

      h4 OAuth2 Server / Browser (in-progress)
      p
        strong OAuth2 Authorization Code Strategy
      p.
        For convenience, you are allowed to authenticate via LDS I/O with your server and
        retrieve anonymized identifiers which are scoped to your app.
      p.
        You may not, however, retrieve personally identifiable or sensitive data via the server APIs.
      p
        strong Zero-Config Demos
        span &nbsp;
      ul
        li 
          a(
            href="https://github.com/LDSorg/backend-oauth2-node-passport-example"
            target="node-passport-seed"
          ) node.js passport Seed Project (Authorization Code Strategy)
          ul
            li
              a(
                href="https://github.com/LDSorg/passport-lds-io"
                target="node-passport-npm"
              ) passport-lds-io (node passport plugin)
        li
          a(
            href="https://github.com/LDSorg/frontend-oauth2-browser-jquery-example"
            target="server-jquery-seed"
          ) jQuery Seed Project (Authorization Code Strategy)

      h2 OAuth3

      p OAuth3 is 100% backwards compatible with OAuth2, however, there are some changes to be aware of:

      h3 OAuth3 Authorization Endpoints
      .alert.alert-info
        p OAuth3 has exactly 1 well-known, strictly defined endpoint
      ul
        li
          span Directive Endpoint:  
          a(href="https://ldsconnect.org/oauth3.json") https://ldsconnect.org/oauth3.json
          p
            pre
              code.
                &nbsp;  { "authorization_dialog": {
                &nbsp;      "method": "GET"
                &nbsp;    , "url": "https://example.com/oauth3/authorize"
                &nbsp;    }
                &nbsp;  , "access_token": {
                &nbsp;      "method": "POST"
                &nbsp;    , "url": "https://example.com/oauth3/token"
                &nbsp;    }
                &nbsp;  , "profile": {
                &nbsp;      "method": "GET"
                &nbsp;    , "url": "https://example.com/oauth3/account/me"
                &nbsp;    }
                &nbsp;  }

          .alert.alert-danger
            p Do not hard code these URLs!
          p
            | Although the provider should provide advanced notice as well as HTTP redirects
            | if any of the URLs change, you should periodically refresh oauth3.json - such as
            | each time your server reboots and in accordance with the HTTP Expires header (especially
            | for always-on non-ephemeral servers).

      h4 Compare to Facebook

      p If you were connecting to facebook, your endpoints would look something like this:

      .alert.alert-info
        p OAuth2 has several undefined, loose endpoints
      ul
        li
          span Authorization URL:  
          a(href="https://www.facebook.com/dialog/oauth") https://www.facebook.com/dialog/oauth
        li
          span Token URL:  
          a(href="https://graph.facebook.com/oauth/access_token") https://graph.facebook.com/oauth/access_token
        li
          span Profile URL:  
          a(href="https://graph.facebook.com/me") https://graph.facebook.com/me

      h3 Why oauth3.json?
      p
        | OAuth3 is designed with the capacity for both delegatation and federation, which would not
        | be possible if connecting to a system required private implementation details such as with OAuth2.
        | Instead of dozens of libraries with slight variations for each provider, one library serves all
        | providers equally well with one strict, standardized JSON endpoint.
      p
        | Also note that the directive <strong>must</strong> be fetched from the end-user address.
        | LDS Connect users log in at ldsconnect.org.

      h3 Encryption
      p
        | Note that the protocol https:// is <strong>required</strong>.
        | OAuth3 implementations <strong>must</strong> not allow unencrypted connections.

      h3 Federation and Delegation
      p 
        | In delegated situations end-users will use identifiers such as
        | johndoe@example.com, johndoe.example.com, or example.com/johndoe.
        | Hence the OAuth3 resource should be a static, cacheable file, available
        | at an endpoint the user will know how to enter (if required).
